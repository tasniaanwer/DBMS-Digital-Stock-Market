#### SIGNUP & LOGIN ####



**************************   USERS    ***********************

-- Create USERS table without identity
CREATE TABLE USERS (
    user_id NUMBER PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL
);


************************   PORTFOLIO    *****************************


CREATE TABLE PORTFOLIO (
    portfolio_id    NUMBER PRIMARY KEY,
    user_id         NUMBER NOT NULL,
    username        VARCHAR2(50) NOT NULL,
    password        VARCHAR2(50) NOT NULL,
    email           VARCHAR2(100) NOT NULL,
    bank_account    VARCHAR2(50) NOT NULL,
    contact_number  VARCHAR2(20) NOT NULL,
    wallet          NUMBER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

-- Create sequence for PORTFOLIO table
CREATE SEQUENCE portfolio_seq
START WITH 1
INCREMENT BY 1;

**********************   USERS TRIGGER  ************************************

-- Create trigger for USERS table
CREATE OR REPLACE TRIGGER trg_user_id
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT user_seq.NEXTVAL INTO :NEW.user_id FROM dual;
END;
/

************************ PORTFOLIO TRIGGER    *****************


-- Create trigger for PORTFOLIO table
CREATE OR REPLACE TRIGGER trg_portfolio_id
BEFORE INSERT ON PORTFOLIO
FOR EACH ROW
BEGIN
    SELECT portfolio_seq.NEXTVAL INTO :NEW.portfolio_id FROM dual;
END;
/


********************** SIGN UP SYSTEM **************************

CREATE OR REPLACE PROCEDURE users_signup (
    p_username       IN VARCHAR2,
    p_password       IN VARCHAR2,
    p_email          IN VARCHAR2,
    p_bank_account   IN VARCHAR2,
    p_contact_number IN VARCHAR2,
    p_wallet         IN NUMBER
) AS
    v_user_id NUMBER;
BEGIN
    -- Insert the new user into the USERS table
    INSERT INTO USERS (username, password, email)
    VALUES (p_username, p_password, p_email)
    RETURNING user_id INTO v_user_id;

    -- Insert a new portfolio entry for the new user with empty company name
    INSERT INTO PORTFOLIO (portfolio_id, user_id, username, password, email, bank_account, contact_number, wallet, company_name)
    VALUES (portfolio_seq.NEXTVAL, v_user_id, p_username, p_password, p_email, p_bank_account, p_contact_number, p_wallet, NULL);

    COMMIT;
END;

****************************** LOGIN SYSTEM *********************

-- Create stored procedure for user login
CREATE OR REPLACE PROCEDURE user_login (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2,
    p_user_id OUT NUMBER
) IS
    v_user_id USERS.user_id%TYPE;
BEGIN
    SELECT user_id INTO v_user_id
    FROM USERS
    WHERE username = p_username AND password = p_password;

    p_user_id := v_user_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_user_id := NULL;
END;
/








****************************** STOCK_TRANSACTIONS *********************

CREATE TABLE STOCK_TRANSACTIONS (
    transaction_id  NUMBER PRIMARY KEY,
    user_id         NUMBER NOT NULL,
    company_id      NUMBER NOT NULL,
    quantity        NUMBER NOT NULL,
    purchase_price  NUMBER NOT NULL,
    transaction_date DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

-- Create sequence for STOCK_TRANSACTIONS table
CREATE SEQUENCE transaction_seq
START WITH 1
INCREMENT BY 1;


************************************   PORTFOLIO_ITEMS     *******************

CREATE TABLE PORTFOLIO_ITEMS (
    item_id NUMBER PRIMARY KEY,
    portfolio_id NUMBER NOT NULL,
    company_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL,
    FOREIGN KEY (portfolio_id) REFERENCES PORTFOLIO(portfolio_id),
    FOREIGN KEY (company_id) REFERENCES COMPANIES(company_id)
);

CREATE SEQUENCE portfolio_items_seq START WITH 1 INCREMENT BY 1;

******************************* BUY SYSTEM   ***********************************

CREATE OR REPLACE PROCEDURE buy_stock (
    p_user_id NUMBER,
    p_company_id NUMBER,
    p_quantity NUMBER
)
IS
    l_stock_price NUMBER;
    l_total_cost NUMBER;
    l_portfolio_id NUMBER;
BEGIN
    -- Get the stock price and available quantity
    SELECT stock_price INTO l_stock_price FROM NEWCOMPANY WHERE company_id = p_company_id;

    l_total_cost := l_stock_price * p_quantity;

    -- Check if user has enough balance
    DECLARE
        l_user_balance NUMBER;
    BEGIN
        SELECT wallet INTO l_user_balance FROM PORTFOLIO WHERE user_id = p_user_id;
        IF l_user_balance < l_total_cost THEN
            RAISE_APPLICATION_ERROR(-20001, 'Insufficient balance');
        END IF;
    END;

    -- Update user balance
    UPDATE PORTFOLIO SET wallet = wallet - l_total_cost WHERE user_id = p_user_id;

    -- Update company stock quantity
    UPDATE NEWCOMPANY SET stock_quantity = stock_quantity - p_quantity WHERE company_id = p_company_id;

    -- Check if the user has a portfolio
    BEGIN
        SELECT portfolio_id INTO l_portfolio_id FROM PORTFOLIO WHERE user_id = p_user_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Create a new portfolio if not exists
            INSERT INTO PORTFOLIO (portfolio_id, user_id)
            VALUES (portfolio_seq.NEXTVAL, p_user_id);
            SELECT portfolio_seq.CURRVAL INTO l_portfolio_id FROM dual;
    END;

    -- Check if the company is already in the user's portfolio
    BEGIN
        UPDATE PORTFOLIO_ITEMS
        SET quantity = quantity + p_quantity
        WHERE portfolio_id = l_portfolio_id AND company_id = p_company_id;

        IF SQL%NOTFOUND THEN
            -- Insert new record if not exists
            INSERT INTO PORTFOLIO_ITEMS (item_id, portfolio_id, company_id, quantity)
            VALUES (portfolio_items_seq.NEXTVAL, l_portfolio_id, p_company_id, p_quantity);
        END IF;
    END;

    -- Display success message
    DBMS_OUTPUT.PUT_LINE('Stock purchase successful for user ' || p_user_id || '.');
END;
/


************************** NEW COMPANY *******************

// company new table
CREATE TABLE NEWCOMPANY (
    company_id     NUMBER PRIMARY KEY,
    company_name   VARCHAR2(100) NOT NULL,
    stock_price    NUMBER NOT NULL,
    stock_quantity NUMBER NOT NULL
);

-- Create sequence for NEWCOMPANY table
CREATE SEQUENCE company_seq
START WITH 1
INCREMENT BY 1;

-- Insert sample data into NEWCOMPANY table
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Grameenphone Ltd.', 300, 1000000000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Beximco Pharmaceuticals Ltd.', 150, 1500000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Square Pharmaceuticals Ltd.', 200, 20000000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company BRAC Bank Ltd.', 120, 50000000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Robi Axiata Ltd.', 200, 9000000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Renata Limited', 250, 356000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Grameen Bank', 120, 400090);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company IDLC Finance Ltd.',400, 500000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Bangladesh Submarine Cable Company Limited', 900, 2000);
INSERT INTO NEWCOMPANY (company_id, company_name, stock_price, stock_quantity) VALUES (company_seq.NEXTVAL, 'Company Eastern Bank Ltd.', 750, 1000000);

COMMIT;





**************************** View Portfolio *******************

CREATE OR REPLACE PROCEDURE view_portfolio (
    p_user_id NUMBER,
    p_cursor OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_cursor FOR
    SELECT p.username, p.email, p.bank_account, p.contact_number, p.wallet,
           pi.company_id, c.company_name, pi.quantity
    FROM PORTFOLIO p
    JOIN PORTFOLIO_ITEMS pi ON p.portfolio_id = pi.portfolio_id
    JOIN NEWCOMPANY c ON pi.company_id = c.company_id
    WHERE p.user_id = p_user_id;
END;
/




*********************************  sell system *******************

CREATE OR REPLACE PROCEDURE sell_stock (
    p_user_id NUMBER,
    p_company_id NUMBER,
    p_quantity NUMBER
)
IS
    l_stock_price NUMBER;
    l_total_gain NUMBER;
    l_portfolio_id NUMBER;
    v_quantity NUMBER;
BEGIN
    -- Retrieve the portfolio ID for the user
    BEGIN
        SELECT portfolio_id INTO l_portfolio_id
        FROM PORTFOLIO
        WHERE user_id = p_user_id;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'User does not have a portfolio');
    END;

    -- Check if the user owns enough stocks to sell
    BEGIN
        SELECT quantity INTO v_quantity
        FROM PORTFOLIO_ITEMS
        WHERE portfolio_id = l_portfolio_id AND company_id = p_company_id;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'User does not own stocks of this company to sell');
    END;

    IF v_quantity < p_quantity THEN
        RAISE_APPLICATION_ERROR(-20003, 'User does not own enough stocks of this company to sell');
    END IF;

    -- Proceed with selling stocks
    -- Get the stock price
    SELECT stock_price INTO l_stock_price FROM NEWCOMPANY WHERE company_id = p_company_id;

    -- Calculate the total gain from selling stocks
    l_total_gain := l_stock_price * p_quantity;

    -- Update user balance with the gained amount
    UPDATE PORTFOLIO SET wallet = wallet + l_total_gain WHERE portfolio_id = l_portfolio_id;

    -- Update company stock quantity
    UPDATE NEWCOMPANY SET stock_quantity = stock_quantity + p_quantity WHERE company_id = p_company_id;

    -- Update the user's portfolio for the sold stocks
    UPDATE PORTFOLIO_ITEMS SET quantity = quantity - p_quantity
    WHERE portfolio_id = l_portfolio_id AND company_id = p_company_id;

    -- Display success message
    DBMS_OUTPUT.PUT_LINE('Stock sold successfully for user ' || p_user_id || '.');
END;
/


******************************   COMPANY LIST VIEW   *********************

CREATE OR REPLACE PROCEDURE get_company_details (
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT company_id, company_name
    FROM NEWCOMPANY;
END;
/


************************ VIEW COMPANY DETAILS *********************

CREATE OR REPLACE PROCEDURE get_company_details_by_id (
    p_company_id NUMBER,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT company_id, company_name, stock_price, stock_quantity
    FROM NEWCOMPANY
    WHERE company_id = p_company_id;
END;
/



